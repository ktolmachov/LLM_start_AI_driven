---
alwaysApply: true
---

## Правила разработки кода

Этот документ содержит правила разработки кода для проекта ИИ-ассистента в виде Телеграм-бота. Подробное техническое видение проекта описано в [vision.md](./vision.md).

---

### Основные принципы

* Следуй принципу **KISS** (Keep It Simple, Stupid) во всех решениях
* Используй **функциональное программирование** вместо ООП
* Пиши **минимальный код** без избыточных абстракций
* Соблюдай **модульность** с четким разграничением ответственности

---

### Стиль кода

* Используй говорящие имена функций и переменных
* Добавляй краткие комментарии для неочевидных решений
* Следуй стилю **PEP8** для Python кода
* Пиши асинхронный код с использованием `async/await`

---

### Структура проекта

* Размещай код согласно структуре из [vision.md](./vision.md)
* Не создавай дополнительные директории без необходимости
* Используй относительные импорты внутри проекта

---

### Работа с зависимостями

* Используй только перечисленные в [vision.md](./vision.md) технологии
* Добавляй зависимости в `pyproject.toml` для управления через `uv`
* Избегай сторонних библиотек, если функциональность можно реализовать стандартными средствами

---

### Обработка ошибок

* Используй простую обработку исключений без сложной иерархии
* Логируй ошибки с достаточной информацией для отладки
* Обрабатывай сетевые ошибки при взаимодействии с API

---

### Конфигурация

* Все настройки должны загружаться из `.env` файла
* Не хардкодь токены, ключи API и другие чувствительные данные
* Используй значения по умолчанию для необязательных параметров

---

### Работа с LLM

* Следуй подходу к работе с LLM из [vision.md](./vision.md)
* Сохраняй историю диалогов в простых структурах данных
* Всегда включай системный промпт в запросы к LLM
